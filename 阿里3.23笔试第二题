public class Test {
    private static int startX,startY,endX,endY;
    private static int row,column;
    private static List<Integer>list=new ArrayList<>();
    private static int[][]direction={{1,0},{-1,0},{0,1},{0,-1}};
    public static void main(String[] args){
        //输入
        int n=0,m=0;//n行，m列
        Scanner scanner =new Scanner(System.in);
        n=scanner.nextInt();
        m=scanner.nextInt();
        row=n;
        column=m;
        String[] map=new String[n];
        for(int i=0;i<n;i++)
            map[i]=scanner.next();
        boolean[][] used=new boolean[n][m];
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                used[i][j]=false;
        //找起点终点
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++) {
                if (map[i].charAt(j) == 'S') {
                    startX = i;
                    startY = j;
                }
                else if (map[i].charAt(j) == 'E') {
                    endX = i;
                    endY = j;
                }
            }
        }
        //开始搜索
        dfs(map,startX,startY,5,used,0);
        int min=Integer.MAX_VALUE;
        for(int num:list)
            if(num<min)
                min=num;
        System.out.println(min);
    }

    public static void dfs(String[]map,int x,int y,int time,boolean[][] used,int count){
        if(x<0 || x>=row || y<0 || y>=column || map[x].charAt(y)=='#' || time==0 || used[x][y])
            return ;

        if(x==endX && y==endY) {
            list.add(count);
            return ;
        }
        used[x][y]=true;
        dfs(map, row - x-1, column-y-1, time - 1, used, count + 1);
        for(int[] d:direction)
            dfs(map, x + d[0], y + d[1], time, used, count + 1);
        used[x][y]=false;
    }
}
